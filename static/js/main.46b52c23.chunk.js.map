{"version":3,"sources":["components/header/Timer.jsx","components/header/ErrorCount.jsx","components/header/Header.jsx","components/card/Card.jsx","components/card/GameOver.jsx","App.js","reportWebVitals.js","index.js"],"names":["formatTime","time","h","Math","floor","m","mm","s","ss","join","Timer","className","ErrorCount","errorCount","Header","restartGame","secondsElapsed","onClick","Card","id","isFlipped","handleClick","cardNumber","flipOnHover","flipOnClick","flipDirection","flipSpeedBackToFront","flipSpeedFrontToBack","style","width","height","backgroundColor","color","GameOver","href","target","App","state","Array","fill","isVisible","shuffledCard","duplicateCard","sort","random","clickCount","prevSelectedCard","prevCardId","gameStarted","timerCount","event","preventDefault","interval","setInterval","tick","cardId","newFlipps","slice","setState","prevState","newCard","previousCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","setTimeout","flipBack","clearInterval","isGameOver","every","element","index","array","formatBoard","gameID","cardcount","flippedCpunt","this","display","map","PureComponent","range","set","i","reduce","preValue","current","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAIMA,EAAa,SAAAC,GACjB,GAAIA,EAAO,EAAG,MAAO,QACrB,IAAMC,EAAIC,KAAKC,MAAMH,EAAO,MACtBI,EAAIF,KAAKC,MAAOH,EAAO,KAAQ,IAC/BK,EAAKD,EAAI,GAAJ,WAAaA,GAAMA,EACxBE,EAAIN,EAAO,GACXO,EAAKD,EAAI,GAAJ,WAAaA,GAAMA,EAC9B,OAAIL,EAAI,EAAU,CAACA,EAAGI,EAAIE,GAAIC,KAAK,KAC7B,GAAN,OAAUJ,EAAV,YAAeG,IAIFE,EADD,SAAC,GAAD,QAAGT,YAAH,MAAU,EAAV,SAAkB,oBAAGU,UAAU,QAAb,4BAAqCX,EAAWC,OCXjEW,EADI,SAAC,GAAD,QAAGC,kBAAH,MAAgB,EAAhB,SAAwB,oBAAGF,UAAU,QAAb,0BAAmCE,MCsB/DC,EAnBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAeH,EAA/B,EAA+BA,WAA/B,OACb,sBAAKF,UAAU,wBAAf,UAEE,qBAAKA,UAAU,qBAAf,SACA,cAAC,EAAD,CAAOV,KAAMe,MAIb,qBAAKL,UAAU,kCAAf,SACE,cAAC,EAAD,CAAOE,WAAYA,MAIrB,qBAAKF,UAAU,cAAf,SACE,wBAAQM,QAASF,EAAaJ,UAAU,iBAAxC,gC,gBCSSO,EAtBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,WAA/B,OAEX,eAAC,IAAD,CAEEC,aAAa,EACbC,aAAa,EACbC,cAAc,aACdL,UAAWA,EACXM,qBAAsB,EACtBC,qBAAsB,EAEtBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QATlC,UAWE,cAAC,YAAD,CAAWb,QAASI,EAAaF,GAAIA,EAChCS,MAAS,CAACG,gBAAiB,aAEhC,cAAC,WAAD,CAAUZ,GAAIA,EAAKF,QAASI,EAAaO,MAAO,CAAEG,gBAAiB,UAAWC,MAAO,SAArF,SACQV,QCdGW,EARE,SAAC,GAAD,IAAGlB,EAAH,EAAGA,YAAH,OACf,sBAAKJ,UAAU,iBAAf,UACE,4CACA,8EAAgD,mBAAIuB,KAAK,0CAA0CC,OAAO,SAA1D,0BAAhD,kBACA,wBAAQxB,UAAU,iBAAiBM,QAASF,EAA5C,8BCIEqB,G,kNAEJC,MAAQ,CAENjB,UAAWkB,MAAM,IAAIC,MAAK,GAE1BC,UAAUF,MAAM,IAAIC,MAAK,GAEzBE,aAAcL,EAAIM,cAAc,GAAGC,MAAK,kBAAMxC,KAAKyC,SAAW,MAE9DC,WAAY,EAEZC,kBAAmB,EAEnBC,YAAa,EAEbC,aAAY,EAEZhC,eAAe,EAEfiC,WAAW,EAEXpC,WAAW,G,EAmBbQ,YAAc,SAAA6B,GACZA,EAAMC,iBACwB,IAA1B,EAAKd,MAAMY,aACf,EAAKG,SAAWC,aAAY,kBAAM,EAAKC,SAAQ,MAE/C,IAAMC,EAASL,EAAMf,OAAOhB,GACtBqC,EAAY,EAAKnB,MAAMjB,UAAUqC,QAavC,GAZA,EAAKC,SAAS,CACZT,WAAY,EAAKZ,MAAMY,WAAa,IAGR,IAA1B,EAAKZ,MAAMQ,YAEf,EAAKa,SAAS,CACVZ,iBAAkB,EAAKT,MAAMI,aAAac,GAC1CR,WAAYQ,KAIU,IAAtBC,EAAUD,KACZC,EAAUD,IAAWC,EAAUD,GAC/B,EAAKG,UAAS,SAAAC,GAAS,MAAK,CAC1BvC,UAAWoC,EACXX,WAAY,EAAKR,MAAMQ,WAAa,MAGR,IAA1B,EAAKR,MAAMQ,YAAkB,CAC/B,EAAKa,SAAS,CAAEb,WAAY,IAC5B,IAAME,EAAa,EAAKV,MAAMU,WACxBa,EAAU,EAAKvB,MAAMI,aAAac,GAClCM,EAAe,EAAKxB,MAAMS,iBAEhC,EAAKgB,YAAYD,EAAcD,EAASb,EAAYQ,K,EAK1DO,YAAc,SAACC,EAAOC,EAAOC,EAASC,GACjC,GAAIH,IAAUC,EAAO,CAItB,IAAMG,EAAW,EAAK9B,MAAMG,UAAUiB,QACtCU,EAASF,IAAW,EACpBE,EAASD,IAAW,EACpBE,YAAW,WACT,EAAKV,UAAS,SAAAC,GAAS,MAAK,CAE1BnB,UAAU2B,QAEX,SAEA,CACH,IAAME,EAAW,EAAKhC,MAAMjB,UAAUqC,QACtCY,EAASJ,IAAW,EACpBI,EAASH,IAAW,EACpB,EAAKR,SAAS,CACd7C,WAAY,EAAKwB,MAAMxB,WAAW,IAElCuD,YAAW,WACT,EAAKV,UAAS,SAAAC,GAAS,MAAK,CAAEvC,UAAWiD,QACxC,O,EAIPtD,YAAc,WACZ,EAAK2C,SAAS,CACZtC,UAAWkB,MAAM,IAAIC,MAAK,GAC1BC,UAAUF,MAAM,IAAIC,MAAK,GACzBE,aAAcL,EAAIM,cAAc,GAAGC,MAAK,kBAAMxC,KAAKyC,SAAW,MAC9DC,WAAY,EACZC,kBAAmB,EACnBC,YAAa,EACbC,aAAY,EACZhC,eAAe,EACfiC,WAAW,EACXpC,WAAW,IAIbyD,cAAc,EAAKlB,W,EAGrBmB,WAAa,WACX,OAAO,EAAKlC,MAAMjB,UAAUoD,OAAM,SAACC,EAASC,EAAOC,GAAjB,OAAuC,IAAZF,M,EAG/DG,YAAY,SAACC,GACX,IAAIC,EAAU,EACd,OAAQD,GACN,IAAK,IACHC,EAAU,GACV,MACF,IAAK,IACHA,EAAU,GAKd,IAAIC,EAAuB,EAAVD,EAClB,EAAKpB,SAAS,CACTV,aAAY,EACZ5B,UAAWkB,MAAMyC,GAAcxC,MAAK,GACpCC,UAAUF,MAAMyC,GAAcxC,MAAK,GACnCE,aAAcL,EAAIM,cAAcoC,GAAWnC,MAAK,kBAAMxC,KAAKyC,SAAW,S,qDAvH5EoC,KAAKtB,SAAS,CACb1C,eAAgBgE,KAAK3C,MAAMrB,eAAiB,M,+BAyHnC,IAAD,OAGP,OAEC,gCACE,sBAAKY,MAAOoD,KAAK3C,MAAMW,YAAc,CAACiC,QAAS,QAAU,CAACA,QAAS,SAAUtE,UAAU,iBAAvF,UACA,6CACA,iEACA,4BAAG,wBAAQA,UAAU,mBAAmBiB,MAAO,CAACC,MAAM,SAAUZ,QAAS,kBAAM,EAAK2D,YAAY,MAA7F,oBACH,4BAAG,wBAAQjE,UAAU,mBAAmBiB,MAAO,CAACC,MAAM,SAAWZ,QAAS,kBAAM,EAAK2D,YAAY,MAA9F,sBACH,4BAAG,wBAAQjE,UAAU,mBAAmBiB,MAAO,CAACC,MAAM,SAAWZ,QAAS,kBAAM,EAAK2D,YAAY,MAA9F,4BAEJ,sBAAKhD,MAAOoD,KAAK3C,MAAMW,YAAc,CAACiC,QAAS,SAAW,CAACA,QAAS,QAApE,UACA,sBAAKrD,MAAOoD,KAAKT,aAAc,CAACU,QAAS,QAAU,CAACA,QAAS,SAA7D,UACA,oBAAItE,UAAU,iBAAd,yBACC,cAAC,EAAD,CAAQI,YAAaiE,KAAKjE,YAAaC,eAAgBgE,KAAK3C,MAAMrB,eAAgBH,WAAYmE,KAAK3C,MAAMxB,gBAEvGmE,KAAKT,aAAe,cAAC,EAAD,CAAUxD,YAAaiE,KAAKjE,cAElD,qBAAKJ,UAAU,iBAAf,SAEKqE,KAAK3C,MAAMI,aAAayC,KAAI,SAAC5D,EAAYoD,GAAb,OAC5B,qBAAK/D,UAAY,EAAK0B,MAAMG,UAAUkC,GAAmB,GAAZ,YAA7C,SACE,cAAC,EAAD,CACEvD,GAAIuD,EACJpD,WAAYA,EACZF,UAAW,EAAKiB,MAAMjB,UAAUsD,GAChCrD,YAAa,EAAKA,eAL4CqD,kB,GA3K5DS,kBAAZ/C,EA+BGM,cAAgB,SAAC0C,GAEtB,IADA,IAAIC,EAAM,GACFC,EAAI,EAAGA,EAAIF,EAAOE,IACtBD,EAAIC,GAAGA,EAEX,OAAOD,EAAIE,QAAO,SAACC,EAAUC,EAASf,EAAOC,GAC3C,OAAOa,EAASE,OAAO,CAACD,EAASA,MACjC,KAsJSrD,QC1LAuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46b52c23.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n {/* Timer component for displaying time elapsed when game gets started */}\r\n //Format time\r\nconst formatTime = time => {\r\n  if (time < 0) return '--:--'\r\n  const h = Math.floor(time / 3600)\r\n  const m = Math.floor((time % 3600) / 60)\r\n  const mm = m < 10 ? `0${m}` : m\r\n  const s = time % 60\r\n  const ss = s < 10 ? `0${s}` : s\r\n  if (h > 0) return [h, mm, ss].join(':')\r\n  return `${m}:${ss}`\r\n} \r\n\r\nconst Timer = ({ time = 0 }) => <p className=\"timer\">Elaspsed Time :{formatTime(time)}</p>\r\nexport default Timer;","import React from 'react';\r\n {/* component for displaying error count when card will not be matched */}\r\n\r\nconst ErrorCount = ({ errorCount = 0 }) => <p className=\"timer\">Error Count :{errorCount}</p>\r\nexport default ErrorCount;\r\n","import React from 'react';\r\nimport Timer from './Timer';\r\nimport Error from './ErrorCount';\r\n\r\n {/* header component which will be container for Timer and ErrorCount component */}\r\n\r\nconst Header = ({ restartGame ,secondsElapsed,errorCount }) => (\r\n  <div className=\"grid-header-container\">\r\n    {/* Timer section */}\r\n    <div className=\"justify-left timer\">\r\n    <Timer time={secondsElapsed} />\r\n    </div>\r\n     {/* End Timer  section */}\r\n      {/* Error Count section */}\r\n    <div className=\"justify-center game-status-text\">\r\n      <Error errorCount={errorCount}></Error>\r\n    </div>\r\n     {/* End Error Count section */}\r\n      {/* Restart section */}\r\n    <div className=\"justify-end\">\r\n      <button onClick={restartGame} className=\"restart-button\">Restart Game</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n// import ReactCardFlip from \"react-card-flip\";\r\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\r\n//Card component ,declaring  properties how do we want flip cards\r\n//front side will be opaque\r\n//back side will have card value\r\n\r\nconst Card = ({ id, isFlipped, handleClick, cardNumber }) => (\r\n \r\n  <Flippy\r\n  //flip properties\r\n    flipOnHover={false} // default false\r\n    flipOnClick={true} // default false\r\n    flipDirection=\"horizontal\" // horizontal or vertical\r\n    isFlipped={isFlipped} \r\n    flipSpeedBackToFront={1} \r\n    flipSpeedFrontToBack={1} \r\n    \r\n    style={{ width: '50px', height: '50px' }} \r\n  >\r\n    <FrontSide onClick={handleClick} id={id}\r\n         style=  {{backgroundColor: '#41669d'}}>\r\n    </FrontSide>\r\n    <BackSide id={id}  onClick={handleClick} style={{ backgroundColor: '#FFFFFF' ,color: 'black'  }}>\r\n          { cardNumber }\r\n    </BackSide>\r\n  </Flippy>\r\n);\r\n\r\nexport default Card;","import React from 'react';\r\n{/* when game will be over ,this component will handle exit*/}\r\nconst GameOver = ({ restartGame }) => (\r\n  <div className=\"justify-center\">\r\n    <h1>Game Over!</h1>\r\n    <h3>If you enjoyed playing this game, follow me < a href='https://www.linkedin.com/in/ashishmit99' target='_blank'>Ashish Kumar</a> for more...</h3>\r\n    <button className=\"restart-button\" onClick={restartGame}>Restart Game</button>\r\n  </div>\r\n);\r\n\r\nexport default GameOver;","\n\nimport React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\n\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n// declaring stateful properties for memory game processing\n  state = { \n    //array to hold flipped properties of card ,by default it will be false for all card\n    isFlipped: Array(10).fill(false),\n    //array tp hold visible property of card\n    isVisible:Array(10).fill(true),\n    //array to hold identical sets of cards in random order\n    shuffledCard: App.duplicateCard(5).sort(() => Math.random() - 0.5),\n    //count of card click\n    clickCount: 1,\n    //hold the card value of previous selected card\n    prevSelectedCard: -1,\n    //hold card id of previous card\n    prevCardId: -1,\n    //check if game started or not\n    gameStarted:false,\n    //timer seconds\n    secondsElapsed:0,\n    //start timer count\n    timerCount:1,\n    //track error count\n    errorCount:0\n  };\n//timer tick event called after every second\n  tick() {\n\t\tthis.setState({\n\t\t\tsecondsElapsed: this.state.secondsElapsed + 1,\n\t\t})\n\t};\n//populate duplicate card with random values\n  static duplicateCard = (range) => {\n    var set = [];\n    for(var i = 0; i < range; i++){\n        set[i]=i;\n    }\n    return set.reduce((preValue, current, index, array) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n//handle click event of card\n  handleClick = event => {\n    event.preventDefault();\n    if (this.state.timerCount === 1){\n    this.interval = setInterval(() => this.tick(), 1000);\n    }\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n      timerCount: this.state.timerCount + 1\n  });\n  //store state of first card\n    if (this.state.clickCount === 1)\n    {\n    this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId\n    });\n  }\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({ \n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n//when two cards clicked\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  };\n//check if card values matched or not\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n       if (card1 === card2) {\n      // const hideCard = this.state.shuffledCard.slice();\n      // hideCard[card1Id] = -1;\n      // hideCard[card2Id] = -1;\n      const hideCard = this.state.isVisible.slice();\n      hideCard[card1Id] = false;\n      hideCard[card2Id] = false;\n      setTimeout(() => {\n        this.setState(prevState => ({\n          //shuffledCard: hideCard\n          isVisible:hideCard\n        }))\n      }, 1000);\n    } \n    else {\n      const flipBack = this.state.isFlipped.slice();\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      this.setState({\n      errorCount: this.state.errorCount+1\n    });\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n//reset game properties\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(10).fill(false),\n      isVisible:Array(10).fill(true),\n      shuffledCard: App.duplicateCard(5).sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1,\n      gameStarted:false,\n      secondsElapsed:0,\n      timerCount:1,\n      errorCount:0\n\n      \n    });\n    clearInterval(this.interval);\n  };\n//check if game is over or not\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n//called when different levels are clicked\n  formatBoard=(gameID)=> {\n    var cardcount=5;\n    switch (gameID) {\n      case '2':\n        cardcount=10;\n        break;\n      case '3':\n        cardcount=25;\n        break;\n      default:\n        break;\n    }\n    var flippedCpunt=cardcount*2;\n\t\t\tthis.setState({\n        gameStarted:true,\n        isFlipped: Array(flippedCpunt).fill(false),\n        isVisible:Array(flippedCpunt).fill(true),\n        shuffledCard: App.duplicateCard(cardcount).sort(() => Math.random() - 0.5)\n    })\n  };\n  render() {\n\n    \n    return (\n      \n     <div>\n       <div style={this.state.gameStarted ? {display: 'none'} : {display: 'block'}} className=\"justify-center\">\n       <h3 >Memory Game</h3>\n       <h3>Please select a game difficulty</h3>\n       <p><button className=\"w3-button w3-red\" style={{width:'120px'}} onClick={() => this.formatBoard('1')}>Easy</button></p>\n       <p><button className=\"w3-button w3-red\" style={{width:'120px'}}  onClick={() => this.formatBoard('2')}>Medium</button></p>\n       <p><button className=\"w3-button w3-red\" style={{width:'120px'}}  onClick={() => this.formatBoard('3')}>Difficult</button></p>\n\t\t\t\t</div>\n      <div style={this.state.gameStarted ? {display: 'block'} : {display: 'none'}} >\n      <div style={this.isGameOver()? {display: 'none'} : {display: 'block'}}>\n      <h3 className=\"justify-center\">Memory Game</h3>\n       <Header restartGame={this.restartGame} secondsElapsed={this.state.secondsElapsed} errorCount={this.state.errorCount} />\n      </div>\n       { this.isGameOver() ? <GameOver restartGame={this.restartGame} /> :\n       \n       <div className=\"grid-container\">\n          {\n            this.state.shuffledCard.map((cardNumber, index) => \n            <div className={!this.state.isVisible[index]?\"hide-card\":\"\"} key={index}>\n              <Card\n                id={index} \n                cardNumber={cardNumber} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n              </div>\n            )\n          }\n        </div>\n       }</div>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}